// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String   @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String
  access_token      String
  expires_at        Int
  token_type        String
  scope             String
  id_token          String
  session_state     String
  User              User     @relation(fields: [userId], references: [id])
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt()

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt()
  User         User     @relation(fields: [userId], references: [id])
}

enum UserRole {
  USER
  ADMIN
  SERVICE_PROVIDER
}

model User {
  id            String         @id @default(uuid())
  name          String?
  email         String         @unique
  emailVerified DateTime?
  role          UserRole       @default(USER)
  userImageUrl  String?
  clerkUserId   String         @unique
  updatedAt     DateTime       @updatedAt()
  createdAt     DateTime       @default(now())
  Orders        Order[]
  OrderDetailss OrderDetails[]
  Carts         Cart[]
  Products      Product[]
  Pyments       Payment[]
  Accounts      Account[]
  Sessions      Session[]
}

// model Register {
//   id        String   @id @default(uuid())
//   name      String?
//   password  String?
//   email     String   @unique
//   imageUrl  String?

//   updatedAt DateTime @updatedAt()
//   createdAt DateTime @default(now())
//   Order        Order[]
//   OrderDetails OrderDetails[]
//   Cart         Cart[]
//   Product      Product[]
//   Pyment       Payment[]
//   Account      Account[]
//   Session      Session[]
// }

// model Category {
//   id          String    @id @default(uuid())
//   title       String
//   imageUrl    String?
//   slug        String    @unique
//   description String?
//   createdAt   DateTime  @default(now())
//   updatedAt   DateTime  @updatedAt()
//   User        User?     @relation(fields: [userId], references: [id])
//   userId      String?
// }

model Order {
  id           String         @id @default(uuid())
  title        String
  totalPaid    Int
  orderAmount  Int
  orderDate    DateTime       @default(now())
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt()
  orderDetails OrderDetails[]
  payments     Payment[]
  User         User?          @relation(fields: [userId], references: [id])
  userId       String?
}

model Payment {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt()
  totalPaid  Int
  amountPaid Int
  datePaid   DateTime @default(now())
  Order      Order?   @relation(fields: [orderId], references: [id])
  orderId    String?
  User       User?    @relation(fields: [userId], references: [id])
  userId     String?
}

model OrderDetails {
  id          String   @id @default(uuid())
  title       String
  totalPaid   Int
  orderAmount Int
  orderDate   DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt()
  Order       Order?   @relation(fields: [orderId], references: [id])
  orderId     String?
  Product     Product? @relation(fields: [productId], references: [id])
  productId   String?
  User        User?    @relation(fields: [userId], references: [id])
  userId      String?
}

model Cart {
  id          String   @id @default(uuid())
  title       String
  totalPaid   Int
  orderAmount Int
  orderDate   DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt()
  Product     Product? @relation(fields: [productId], references: [id])
  productId   String?
  User        User?    @relation(fields: [userId], references: [id])
  userId      String?
}

model Product {
  id             String         @id @default(uuid())
  name           String
  costPrice      Float
  sellingPrice   Float
  description    String
  category       String
  userId         String?
  imageUrl       String?
  employeeName   String
  quantityInHand Int
  updatedAt      DateTime       @updatedAt()
  createdAt      DateTime       @default(now())
  User           User?          @relation(fields: [userId], references: [id])
  orderDetails   OrderDetails[]
  Cart           Cart[]
}
